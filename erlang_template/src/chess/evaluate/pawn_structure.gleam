import chess/bitboard
import chess/evaluate/common
import chess/game
import chess/piece
import chess/player
import chess/square
import gleam/bool
import gleam/dict
import gleam/int

pub fn evaluate(game: game.Game, phase: Float) -> Float {
  let bitboard = game.get_game_bitboard(game)
  let white_pawns =
    bitboard.get_bitboard_piece(bitboard, piece.Piece(player.White, piece.Pawn))
  let black_pawns =
    bitboard.get_bitboard_piece(bitboard, piece.Piece(player.Black, piece.Pawn))

  let #(score_mg, score_eg) =
    game.board(game)
    |> dict.fold(#(0, 0), fn(acc, square, piece) {
      let score = case piece {
        piece.Piece(player.White, piece.Pawn) -> {
          evaluate_at(square, player.White, white_pawns, black_pawns)
        }
        piece.Piece(player.Black, piece.Pawn) -> {
          evaluate_at(square, player.Black, black_pawns, white_pawns)
        }
        _ -> #(0, 0)
      }
      #(
        acc.0 + score.0 * common.player(piece.player),
        acc.1 + score.1 * common.player(piece.player),
      )
    })
  let score =
    common.taper(score_mg |> int.to_float, score_eg |> int.to_float, phase)
  score
}

fn evaluate_at(
  square: square.Square,
  us: player.Player,
  our_pawns: bitboard.BitBoard,
  their_pawns: bitboard.BitBoard,
) {
  let them = player.opponent(us)
  let isolated = int.bitwise_and(isolated_mask(square), our_pawns) == 0
  let phallanx = int.bitwise_and(phallanx_mask(square), our_pawns) != 0

  let supported = {
    use <- bool.guard(isolated, 0)
    case
      int.bitwise_and(supported_left_mask(square, us), our_pawns) != 0,
      int.bitwise_and(supported_right_mask(square, us), our_pawns) != 0
    {
      True, True -> 2
      False, False -> 0
      _, _ -> 1
    }
  }

  let connected = supported != 0 || phallanx

  let doubled = {
    // we don't count doubled if we're connected
    use <- bool.guard(connected, False)
    // only check the square on space back

    int.bitwise_and(
      bitboard.from_square(case us {
        player.White -> square - 16
        player.Black -> square + 16
      }),
      our_pawns,
    )
    != 0
  }
  let opposed = int.bitwise_and(opposed_mask(square, us), their_pawns) != 0

  let doubled_isolated = {
    isolated
    && int.bitwise_and(isolated_mask(square), their_pawns) == 0
    && opposed_mask(square, us) |> int.bitwise_and(their_pawns) != 0
    && int.bitwise_and(opposed_mask(square, them), our_pawns) != 0
  }

  let passed = int.bitwise_and(passed_mask(square, us), their_pawns) == 0

  let rank_from_start = case us {
    player.White -> square.rank(square)
    player.Black -> 7 - square.rank(square)
  }

  #(
    score_mg(
      rank_from_start,
      doubled_isolated:,
      doubled:,
      isolated:,
      opposed:,
      supported:,
      phallanx:,
      passed:,
    ),
    score_eg(
      rank_from_start,
      doubled_isolated:,
      doubled:,
      isolated:,
      opposed:,
      supported:,
      phallanx:,
      passed:,
    ),
  )
}

fn score_mg(
  rank_from_start: Int,
  doubled_isolated doubled_isolated: Bool,
  doubled doubled: Bool,
  isolated isolated: Bool,
  opposed opposed: Bool,
  supported supported: Int,
  phallanx phallanx: Bool,
  passed passed: Bool,
) {
  let connected = supported != 0 || phallanx
  // taken from stockfish (mostly, we're missing some terms )
  case doubled_isolated, isolated {
    // doubled isolated
    True, _ -> -11
    // just isolated
    _, True -> -5
    _, _ -> 0
  }
  + case doubled {
    // doubled penalty
    True -> -11
    False -> 0
  }
  + case connected {
    // connected
    True -> connected_bonus_mg(rank_from_start, opposed:, supported:, phallanx:)
    False -> 0
  }
  + case !opposed && !connected {
    // weak unopposed
    True -> -13
    False -> 0
  }
  + case passed {
    True -> rank_from_start * 5
    False -> 0
  }
}

fn score_eg(
  rank_from_start: Int,
  doubled_isolated doubled_isolated: Bool,
  doubled doubled: Bool,
  isolated isolated: Bool,
  opposed opposed: Bool,
  supported supported: Int,
  phallanx phallanx: Bool,
  passed passed: Bool,
) {
  let connected = supported != 0 || phallanx
  // taken from stockfish (mostly, we're missing some terms )
  case doubled_isolated, isolated {
    // doubled isolated
    True, _ -> -56
    // just isolated
    _, True -> -15
    _, _ -> 0
  }
  + case doubled {
    // doubled penalty
    True -> -56
    False -> 0
  }
  + case connected {
    // connected
    True ->
      connected_bonus_mg(rank_from_start, opposed:, supported:, phallanx:)
      * { rank_from_start - 2 }
      / 4
    False -> 0
  }
  + case !opposed && !connected {
    // weak unopposed
    True -> -27
    False -> 0
  }
  + case passed {
    True -> rank_from_start * 10
    False -> 0
  }
}

// assume it's connected at this point
fn connected_bonus_mg(
  rank: Int,
  opposed opposed: Bool,
  supported supported: Int,
  phallanx phallanx: Bool,
) {
  let seed = case rank {
    0 -> 0
    1 -> 7
    2 -> 8
    3 -> 12
    4 -> 29
    5 -> 48
    6 -> 86
    _ -> panic
  }
  {
    case phallanx, opposed {
      True, False -> 3
      False, True -> 1
      _, _ -> 2
    }
    * seed
  }
  + { 21 * supported }
}

fn phallanx_mask(square: square.Square) {
  case square {
    0x00 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010
    0x01 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000101
    0x02 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001010
    0x03 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010100
    0x04 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00101000
    0x05 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_01010000
    0x06 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_10100000
    0x07 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_01000000

    0x10 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000010_00000000
    0x11 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00000101_00000000
    0x12 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00001010_00000000
    0x13 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00010100_00000000
    0x14 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_00101000_00000000
    0x15 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_01010000_00000000
    0x16 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_10100000_00000000
    0x17 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000000_01000000_00000000

    0x20 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000010_00000000_00000000
    0x21 ->
      0b_00000000_00000000_00000000_00000000_00000000_00000101_00000000_00000000
    0x22 ->
      0b_00000000_00000000_00000000_00000000_00000000_00001010_00000000_00000000
    0x23 ->
      0b_00000000_00000000_00000000_00000000_00000000_00010100_00000000_00000000
    0x24 ->
      0b_00000000_00000000_00000000_00000000_00000000_00101000_00000000_00000000
    0x25 ->
      0b_00000000_00000000_00000000_00000000_00000000_01010000_00000000_00000000
    0x26 ->
      0b_00000000_00000000_00000000_00000000_00000000_10100000_00000000_00000000
    0x27 ->
      0b_00000000_00000000_00000000_00000000_00000000_01000000_00000000_00000000

    0x30 ->
      0b_00000000_00000000_00000000_00000000_00000010_00000000_00000000_00000000
    0x31 ->
      0b_00000000_00000000_00000000_00000000_00000101_00000000_00000000_00000000
    0x32 ->
      0b_00000000_00000000_00000000_00000000_00001010_00000000_00000000_00000000
    0x33 ->
      0b_00000000_00000000_00000000_00000000_00010100_00000000_00000000_00000000
    0x34 ->
      0b_00000000_00000000_00000000_00000000_00101000_00000000_00000000_00000000
    0x35 ->
      0b_00000000_00000000_00000000_00000000_01010000_00000000_00000000_00000000
    0x36 ->
      0b_00000000_00000000_00000000_00000000_10100000_00000000_00000000_00000000
    0x37 ->
      0b_00000000_00000000_00000000_00000000_01000000_00000000_00000000_00000000

    0x40 ->
      0b_00000000_00000000_00000000_00000010_00000000_00000000_00000000_00000000
    0x41 ->
      0b_00000000_00000000_00000000_00000101_00000000_00000000_00000000_00000000
    0x42 ->
      0b_00000000_00000000_00000000_00001010_00000000_00000000_00000000_00000000
    0x43 ->
      0b_00000000_00000000_00000000_00010100_00000000_00000000_00000000_00000000
    0x44 ->
      0b_00000000_00000000_00000000_00101000_00000000_00000000_00000000_00000000
    0x45 ->
      0b_00000000_00000000_00000000_01010000_00000000_00000000_00000000_00000000
    0x46 ->
      0b_00000000_00000000_00000000_10100000_00000000_00000000_00000000_00000000
    0x47 ->
      0b_00000000_00000000_00000000_01000000_00000000_00000000_00000000_00000000

    0x50 ->
      0b_00000000_00000000_00000010_00000000_00000000_00000000_00000000_00000000
    0x51 ->
      0b_00000000_00000000_00000101_00000000_00000000_00000000_00000000_00000000
    0x52 ->
      0b_00000000_00000000_00001010_00000000_00000000_00000000_00000000_00000000
    0x53 ->
      0b_00000000_00000000_00010100_00000000_00000000_00000000_00000000_00000000
    0x54 ->
      0b_00000000_00000000_00101000_00000000_00000000_00000000_00000000_00000000
    0x55 ->
      0b_00000000_00000000_01010000_00000000_00000000_00000000_00000000_00000000
    0x56 ->
      0b_00000000_00000000_10100000_00000000_00000000_00000000_00000000_00000000
    0x57 ->
      0b_00000000_00000000_01000000_00000000_00000000_00000000_00000000_00000000

    0x60 ->
      0b_00000000_00000010_00000000_00000000_00000000_00000000_00000000_00000000
    0x61 ->
      0b_00000000_00000101_00000000_00000000_00000000_00000000_00000000_00000000
    0x62 ->
      0b_00000000_00001010_00000000_00000000_00000000_00000000_00000000_00000000
    0x63 ->
      0b_00000000_00010100_00000000_00000000_00000000_00000000_00000000_00000000
    0x64 ->
      0b_00000000_00101000_00000000_00000000_00000000_00000000_00000000_00000000
    0x65 ->
      0b_00000000_01010000_00000000_00000000_00000000_00000000_00000000_00000000
    0x66 ->
      0b_00000000_10100000_00000000_00000000_00000000_00000000_00000000_00000000
    0x67 ->
      0b_00000000_01000000_00000000_00000000_00000000_00000000_00000000_00000000

    0x70 ->
      0b_00000010_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    0x71 ->
      0b_00000101_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    0x72 ->
      0b_00001010_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    0x73 ->
      0b_00010100_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    0x74 ->
      0b_00101000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    0x75 ->
      0b_01010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    0x76 ->
      0b_10100000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    0x77 ->
      0b_01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
    _ -> panic
  }
}

fn supported_left_mask(square: square.Square, player: player.Player) {
  let supporting_square = case player {
    player.White -> square - 17
    player.Black -> square + 15
  }
  use <- bool.guard(int.bitwise_and(0x88, supporting_square) != 0, 0)
  bitboard.from_square(supporting_square)
}

fn supported_right_mask(square: square.Square, player: player.Player) {
  let supporting_square = case player {
    player.White -> square - 15
    player.Black -> square + 17
  }
  use <- bool.guard(int.bitwise_and(0x88, supporting_square) != 0, 0)
  bitboard.from_square(supporting_square)
}

fn opposed_mask(square: square.Square, player: player.Player) {
  case player {
    player.White -> {
      case square {
        0x00 ->
          0b_00000001_00000001_00000001_00000001_00000001_00000001_00000001_00000000
        0x01 ->
          0b_00000010_00000010_00000010_00000010_00000010_00000010_00000010_00000000
        0x02 ->
          0b_00000100_00000100_00000100_00000100_00000100_00000100_00000100_00000000
        0x03 ->
          0b_00001000_00001000_00001000_00001000_00001000_00001000_00001000_00000000
        0x04 ->
          0b_00010000_00010000_00010000_00010000_00010000_00010000_00010000_00000000
        0x05 ->
          0b_00100000_00100000_00100000_00100000_00100000_00100000_00100000_00000000
        0x06 ->
          0b_01000000_01000000_01000000_01000000_01000000_01000000_01000000_00000000
        0x07 ->
          0b_10000000_10000000_10000000_10000000_10000000_10000000_10000000_00000000

        0x10 ->
          0b_00000001_00000001_00000001_00000001_00000001_00000001_00000000_00000000
        0x11 ->
          0b_00000010_00000010_00000010_00000010_00000010_00000010_00000000_00000000
        0x12 ->
          0b_00000100_00000100_00000100_00000100_00000100_00000100_00000000_00000000
        0x13 ->
          0b_00001000_00001000_00001000_00001000_00001000_00001000_00000000_00000000
        0x14 ->
          0b_00010000_00010000_00010000_00010000_00010000_00010000_00000000_00000000
        0x15 ->
          0b_00100000_00100000_00100000_00100000_00100000_00100000_00000000_00000000
        0x16 ->
          0b_01000000_01000000_01000000_01000000_01000000_01000000_00000000_00000000
        0x17 ->
          0b_10000000_10000000_10000000_10000000_10000000_10000000_00000000_00000000

        0x20 ->
          0b_00000001_00000001_00000001_00000001_00000001_00000000_00000000_00000000
        0x21 ->
          0b_00000010_00000010_00000010_00000010_00000010_00000000_00000000_00000000
        0x22 ->
          0b_00000100_00000100_00000100_00000100_00000100_00000000_00000000_00000000
        0x23 ->
          0b_00001000_00001000_00001000_00001000_00001000_00000000_00000000_00000000
        0x24 ->
          0b_00010000_00010000_00010000_00010000_00010000_00000000_00000000_00000000
        0x25 ->
          0b_00100000_00100000_00100000_00100000_00100000_00000000_00000000_00000000
        0x26 ->
          0b_01000000_01000000_01000000_01000000_01000000_00000000_00000000_00000000
        0x27 ->
          0b_10000000_10000000_10000000_10000000_10000000_00000000_00000000_00000000

        0x30 ->
          0b_00000001_00000001_00000001_00000001_00000000_00000000_00000000_00000000
        0x31 ->
          0b_00000010_00000010_00000010_00000010_00000000_00000000_00000000_00000000
        0x32 ->
          0b_00000100_00000100_00000100_00000100_00000000_00000000_00000000_00000000
        0x33 ->
          0b_00001000_00001000_00001000_00001000_00000000_00000000_00000000_00000000
        0x34 ->
          0b_00010000_00010000_00010000_00010000_00000000_00000000_00000000_00000000
        0x35 ->
          0b_00100000_00100000_00100000_00100000_00000000_00000000_00000000_00000000
        0x36 ->
          0b_01000000_01000000_01000000_01000000_00000000_00000000_00000000_00000000
        0x37 ->
          0b_10000000_10000000_10000000_10000000_00000000_00000000_00000000_00000000

        0x40 ->
          0b_00000001_00000001_00000001_00000000_00000000_00000000_00000000_00000000
        0x41 ->
          0b_00000010_00000010_00000010_00000000_00000000_00000000_00000000_00000000
        0x42 ->
          0b_00000100_00000100_00000100_00000000_00000000_00000000_00000000_00000000
        0x43 ->
          0b_00001000_00001000_00001000_00000000_00000000_00000000_00000000_00000000
        0x44 ->
          0b_00010000_00010000_00010000_00000000_00000000_00000000_00000000_00000000
        0x45 ->
          0b_00100000_00100000_00100000_00000000_00000000_00000000_00000000_00000000
        0x46 ->
          0b_01000000_01000000_01000000_00000000_00000000_00000000_00000000_00000000
        0x47 ->
          0b_10000000_10000000_10000000_00000000_00000000_00000000_00000000_00000000

        0x50 ->
          0b_00000001_00000001_00000000_00000000_00000000_00000000_00000000_00000000
        0x51 ->
          0b_00000010_00000010_00000000_00000000_00000000_00000000_00000000_00000000
        0x52 ->
          0b_00000100_00000100_00000000_00000000_00000000_00000000_00000000_00000000
        0x53 ->
          0b_00001000_00001000_00000000_00000000_00000000_00000000_00000000_00000000
        0x54 ->
          0b_00010000_00010000_00000000_00000000_00000000_00000000_00000000_00000000
        0x55 ->
          0b_00100000_00100000_00000000_00000000_00000000_00000000_00000000_00000000
        0x56 ->
          0b_01000000_01000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x57 ->
          0b_10000000_10000000_00000000_00000000_00000000_00000000_00000000_00000000

        0x60 ->
          0b_00000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x61 ->
          0b_00000010_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x62 ->
          0b_00000100_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x63 ->
          0b_00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x64 ->
          0b_00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x65 ->
          0b_00100000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x66 ->
          0b_01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x67 ->
          0b_10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000

        0x70 -> 0
        0x71 -> 0
        0x72 -> 0
        0x73 -> 0
        0x74 -> 0
        0x75 -> 0
        0x76 -> 0
        0x77 -> 0
        _ -> panic
      }
    }
    player.Black -> {
      case square {
        0x70 ->
          0b_00000000_00000001_00000001_00000001_00000001_00000001_00000001_00000001
        0x71 ->
          0b_00000000_00000010_00000010_00000010_00000010_00000010_00000010_00000010
        0x72 ->
          0b_00000000_00000100_00000100_00000100_00000100_00000100_00000100_00000100
        0x73 ->
          0b_00000000_00001000_00001000_00001000_00001000_00001000_00001000_00001000
        0x74 ->
          0b_00000000_00010000_00010000_00010000_00010000_00010000_00010000_00010000
        0x75 ->
          0b_00000000_00100000_00100000_00100000_00100000_00100000_00100000_00100000
        0x76 ->
          0b_00000000_01000000_01000000_01000000_01000000_01000000_01000000_01000000
        0x77 ->
          0b_00000000_10000000_10000000_10000000_10000000_10000000_10000000_10000000

        0x60 ->
          0b_00000000_00000000_00000001_00000001_00000001_00000001_00000001_00000001
        0x61 ->
          0b_00000000_00000000_00000010_00000010_00000010_00000010_00000010_00000010
        0x62 ->
          0b_00000000_00000000_00000100_00000100_00000100_00000100_00000100_00000100
        0x63 ->
          0b_00000000_00000000_00001000_00001000_00001000_00001000_00001000_00001000
        0x64 ->
          0b_00000000_00000000_00010000_00010000_00010000_00010000_00010000_00010000
        0x65 ->
          0b_00000000_00000000_00100000_00100000_00100000_00100000_00100000_00100000
        0x66 ->
          0b_00000000_00000000_01000000_01000000_01000000_01000000_01000000_01000000
        0x67 ->
          0b_00000000_00000000_10000000_10000000_10000000_10000000_10000000_10000000

        0x50 ->
          0b_00000000_00000000_00000000_00000001_00000001_00000001_00000001_00000001
        0x51 ->
          0b_00000000_00000000_00000000_00000010_00000010_00000010_00000010_00000010
        0x52 ->
          0b_00000000_00000000_00000000_00000100_00000100_00000100_00000100_00000100
        0x53 ->
          0b_00000000_00000000_00000000_00001000_00001000_00001000_00001000_00001000
        0x54 ->
          0b_00000000_00000000_00000000_00010000_00010000_00010000_00010000_00010000
        0x55 ->
          0b_00000000_00000000_00000000_00100000_00100000_00100000_00100000_00100000
        0x56 ->
          0b_00000000_00000000_00000000_01000000_01000000_01000000_01000000_01000000
        0x57 ->
          0b_00000000_00000000_00000000_10000000_10000000_10000000_10000000_10000000

        0x40 ->
          0b_00000000_00000000_00000000_00000000_00000001_00000001_00000001_00000001
        0x41 ->
          0b_00000000_00000000_00000000_00000000_00000010_00000010_00000010_00000010
        0x42 ->
          0b_00000000_00000000_00000000_00000000_00000100_00000100_00000100_00000100
        0x43 ->
          0b_00000000_00000000_00000000_00000000_00001000_00001000_00001000_00001000
        0x44 ->
          0b_00000000_00000000_00000000_00000000_00010000_00010000_00010000_00010000
        0x45 ->
          0b_00000000_00000000_00000000_00000000_00100000_00100000_00100000_00100000
        0x46 ->
          0b_00000000_00000000_00000000_00000000_01000000_01000000_01000000_01000000
        0x47 ->
          0b_00000000_00000000_00000000_00000000_10000000_10000000_10000000_10000000

        0x30 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000001_00000001_00000001
        0x31 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000010_00000010_00000010
        0x32 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000100_00000100_00000100
        0x33 ->
          0b_00000000_00000000_00000000_00000000_00000000_00001000_00001000_00001000
        0x34 ->
          0b_00000000_00000000_00000000_00000000_00000000_00010000_00010000_00010000
        0x35 ->
          0b_00000000_00000000_00000000_00000000_00000000_00100000_00100000_00100000
        0x36 ->
          0b_00000000_00000000_00000000_00000000_00000000_01000000_01000000_01000000
        0x37 ->
          0b_00000000_00000000_00000000_00000000_00000000_10000000_10000000_10000000

        0x20 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000001_00000001
        0x21 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000010_00000010
        0x22 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000100_00000100
        0x23 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00001000_00001000
        0x24 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00010000_00010000
        0x25 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00100000_00100000
        0x26 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_01000000_01000000
        0x27 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_10000000_10000000

        0x10 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001
        0x11 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010
        0x12 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000100
        0x13 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000
        0x14 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000
        0x15 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00100000
        0x16 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_01000000
        0x17 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000000

        0x00 -> 0
        0x01 -> 0
        0x02 -> 0
        0x03 -> 0
        0x04 -> 0
        0x05 -> 0
        0x06 -> 0
        0x07 -> 0
        _ -> panic
      }
    }
  }
}

fn passed_mask(square: square.Square, player: player.Player) {
  case player {
    player.White -> {
      case square {
        0x00 ->
          0b_00000011_00000011_00000011_00000011_00000011_00000011_00000001_00000000
        0x01 ->
          0b_00000111_00000111_00000111_00000111_00000111_00000111_00000010_00000000
        0x02 ->
          0b_00001110_00001110_00001110_00001110_00001110_00001110_00000100_00000000
        0x03 ->
          0b_00011100_00011100_00011100_00011100_00011100_00011100_00001000_00000000
        0x04 ->
          0b_00111000_00111000_00111000_00111000_00111000_00111000_00010000_00000000
        0x05 ->
          0b_01110000_01110000_01110000_01110000_01110000_01110000_00100000_00000000
        0x06 ->
          0b_11100000_11100000_11100000_11100000_11100000_11100000_01000000_00000000
        0x07 ->
          0b_11000000_11000000_11000000_11000000_11000000_11000000_10000000_00000000

        0x10 ->
          0b_00000011_00000011_00000011_00000011_00000011_00000001_00000000_00000000
        0x11 ->
          0b_00000111_00000111_00000111_00000111_00000111_00000010_00000000_00000000
        0x12 ->
          0b_00001110_00001110_00001110_00001110_00001110_00000100_00000000_00000000
        0x13 ->
          0b_00011100_00011100_00011100_00011100_00011100_00001000_00000000_00000000
        0x14 ->
          0b_00111000_00111000_00111000_00111000_00111000_00010000_00000000_00000000
        0x15 ->
          0b_01110000_01110000_01110000_01110000_01110000_00100000_00000000_00000000
        0x16 ->
          0b_11100000_11100000_11100000_11100000_11100000_01000000_00000000_00000000
        0x17 ->
          0b_11000000_11000000_11000000_11000000_11000000_10000000_00000000_00000000

        0x20 ->
          0b_00000011_00000011_00000011_00000011_00000001_00000000_00000000_00000000
        0x21 ->
          0b_00000111_00000111_00000111_00000111_00000010_00000000_00000000_00000000
        0x22 ->
          0b_00001110_00001110_00001110_00001110_00000100_00000000_00000000_00000000
        0x23 ->
          0b_00011100_00011100_00011100_00011100_00001000_00000000_00000000_00000000
        0x24 ->
          0b_00111000_00111000_00111000_00111000_00010000_00000000_00000000_00000000
        0x25 ->
          0b_01110000_01110000_01110000_01110000_00100000_00000000_00000000_00000000
        0x26 ->
          0b_11100000_11100000_11100000_11100000_01000000_00000000_00000000_00000000
        0x27 ->
          0b_11000000_11000000_11000000_11000000_10000000_00000000_00000000_00000000

        0x30 ->
          0b_00000011_00000011_00000011_00000001_00000000_00000000_00000000_00000000
        0x31 ->
          0b_00000111_00000111_00000111_00000010_00000000_00000000_00000000_00000000
        0x32 ->
          0b_00001110_00001110_00001110_00000100_00000000_00000000_00000000_00000000
        0x33 ->
          0b_00011100_00011100_00011100_00001000_00000000_00000000_00000000_00000000
        0x34 ->
          0b_00111000_00111000_00111000_00010000_00000000_00000000_00000000_00000000
        0x35 ->
          0b_01110000_01110000_01110000_00100000_00000000_00000000_00000000_00000000
        0x36 ->
          0b_11100000_11100000_11100000_01000000_00000000_00000000_00000000_00000000
        0x37 ->
          0b_11000000_11000000_11000000_10000000_00000000_00000000_00000000_00000000

        0x40 ->
          0b_00000011_00000011_00000001_00000000_00000000_00000000_00000000_00000000
        0x41 ->
          0b_00000111_00000111_00000010_00000000_00000000_00000000_00000000_00000000
        0x42 ->
          0b_00001110_00001110_00000100_00000000_00000000_00000000_00000000_00000000
        0x43 ->
          0b_00011100_00011100_00001000_00000000_00000000_00000000_00000000_00000000
        0x44 ->
          0b_00111000_00111000_00010000_00000000_00000000_00000000_00000000_00000000
        0x45 ->
          0b_01110000_01110000_00100000_00000000_00000000_00000000_00000000_00000000
        0x46 ->
          0b_11100000_11100000_01000000_00000000_00000000_00000000_00000000_00000000
        0x47 ->
          0b_11000000_11000000_10000000_00000000_00000000_00000000_00000000_00000000

        0x50 ->
          0b_00000011_00000001_00000000_00000000_00000000_00000000_00000000_00000000
        0x51 ->
          0b_00000111_00000010_00000000_00000000_00000000_00000000_00000000_00000000
        0x52 ->
          0b_00001110_00000100_00000000_00000000_00000000_00000000_00000000_00000000
        0x53 ->
          0b_00011100_00001000_00000000_00000000_00000000_00000000_00000000_00000000
        0x54 ->
          0b_00111000_00010000_00000000_00000000_00000000_00000000_00000000_00000000
        0x55 ->
          0b_01110000_00100000_00000000_00000000_00000000_00000000_00000000_00000000
        0x56 ->
          0b_11100000_01000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x57 ->
          0b_11000000_10000000_00000000_00000000_00000000_00000000_00000000_00000000

        0x60 ->
          0b_00000001_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x61 ->
          0b_00000010_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x62 ->
          0b_00000100_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x63 ->
          0b_00001000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x64 ->
          0b_00010000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x65 ->
          0b_00100000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x66 ->
          0b_01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x67 ->
          0b_10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000
        0x70 -> 0
        0x71 -> 0
        0x72 -> 0
        0x73 -> 0
        0x74 -> 0
        0x75 -> 0
        0x76 -> 0
        0x77 -> 0
        _ -> panic
      }
    }
    player.Black -> {
      case square {
        0x70 ->
          0b_00000000_00000001_00000011_00000011_00000011_00000011_00000011_00000011
        0x71 ->
          0b_00000000_00000010_00000111_00000111_00000111_00000111_00000111_00000111
        0x72 ->
          0b_00000000_00000100_00001110_00001110_00001110_00001110_00001110_00001110
        0x73 ->
          0b_00000000_00001000_00011100_00011100_00011100_00011100_00011100_00011100
        0x74 ->
          0b_00000000_00010000_00111000_00111000_00111000_00111000_00111000_00111000
        0x75 ->
          0b_00000000_00100000_01110000_01110000_01110000_01110000_01110000_01110000
        0x76 ->
          0b_00000000_01000000_11100000_11100000_11100000_11100000_11100000_11100000
        0x77 ->
          0b_00000000_10000000_11000000_11000000_11000000_11000000_11000000_11000000

        0x60 ->
          0b_00000000_00000000_00000001_00000011_00000011_00000011_00000011_00000011
        0x61 ->
          0b_00000000_00000000_00000010_00000111_00000111_00000111_00000111_00000111
        0x62 ->
          0b_00000000_00000000_00000100_00001110_00001110_00001110_00001110_00001110
        0x63 ->
          0b_00000000_00000000_00001000_00011100_00011100_00011100_00011100_00011100
        0x64 ->
          0b_00000000_00000000_00010000_00111000_00111000_00111000_00111000_00111000
        0x65 ->
          0b_00000000_00000000_00100000_01110000_01110000_01110000_01110000_01110000
        0x66 ->
          0b_00000000_00000000_01000000_11100000_11100000_11100000_11100000_11100000
        0x67 ->
          0b_00000000_00000000_10000000_11000000_11000000_11000000_11000000_11000000

        0x50 ->
          0b_00000000_00000000_00000000_00000001_00000011_00000011_00000011_00000011
        0x51 ->
          0b_00000000_00000000_00000000_00000010_00000111_00000111_00000111_00000111
        0x52 ->
          0b_00000000_00000000_00000000_00000100_00001110_00001110_00001110_00001110
        0x53 ->
          0b_00000000_00000000_00000000_00001000_00011100_00011100_00011100_00011100
        0x54 ->
          0b_00000000_00000000_00000000_00010000_00111000_00111000_00111000_00111000
        0x55 ->
          0b_00000000_00000000_00000000_00100000_01110000_01110000_01110000_01110000
        0x56 ->
          0b_00000000_00000000_00000000_01000000_11100000_11100000_11100000_11100000
        0x57 ->
          0b_00000000_00000000_00000000_10000000_11000000_11000000_11000000_11000000

        0x40 ->
          0b_00000000_00000000_00000000_00000000_00000001_00000011_00000011_00000011
        0x41 ->
          0b_00000000_00000000_00000000_00000000_00000010_00000111_00000111_00000111
        0x42 ->
          0b_00000000_00000000_00000000_00000000_00000100_00001110_00001110_00001110
        0x43 ->
          0b_00000000_00000000_00000000_00000000_00001000_00011100_00011100_00011100
        0x44 ->
          0b_00000000_00000000_00000000_00000000_00010000_00111000_00111000_00111000
        0x45 ->
          0b_00000000_00000000_00000000_00000000_00100000_01110000_01110000_01110000
        0x46 ->
          0b_00000000_00000000_00000000_00000000_01000000_11100000_11100000_11100000
        0x47 ->
          0b_00000000_00000000_00000000_00000000_10000000_11000000_11000000_11000000

        0x30 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000001_00000011_00000011
        0x31 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000010_00000111_00000111
        0x32 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000100_00001110_00001110
        0x33 ->
          0b_00000000_00000000_00000000_00000000_00000000_00001000_00011100_00011100
        0x34 ->
          0b_00000000_00000000_00000000_00000000_00000000_00010000_00111000_00111000
        0x35 ->
          0b_00000000_00000000_00000000_00000000_00000000_00100000_01110000_01110000
        0x36 ->
          0b_00000000_00000000_00000000_00000000_00000000_01000000_11100000_11100000
        0x37 ->
          0b_00000000_00000000_00000000_00000000_00000000_10000000_11000000_11000000

        0x20 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000001_00000011
        0x21 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000010_00000111
        0x22 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000100_00001110
        0x23 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00001000_00011100
        0x24 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00010000_00111000
        0x25 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00100000_01110000
        0x26 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_01000000_11100000
        0x27 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_10000000_11000000

        0x10 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001
        0x11 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010
        0x12 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000100
        0x13 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00001000
        0x14 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00010000
        0x15 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00100000
        0x16 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_01000000
        0x17 ->
          0b_00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000000

        0x00 -> 0
        0x01 -> 0
        0x02 -> 0
        0x03 -> 0
        0x04 -> 0
        0x05 -> 0
        0x06 -> 0
        0x07 -> 0
        _ -> panic
      }
    }
  }
}

fn isolated_mask(square: square.Square) {
  case square.file(square) {
    0 ->
      0b_00000010_00000010_00000010_00000010_00000010_00000010_00000010_00000010
    1 ->
      0b_00000101_00000101_00000101_00000101_00000101_00000101_00000101_00000101
    2 ->
      0b_00001010_00001010_00001010_00001010_00001010_00001010_00001010_00001010
    3 ->
      0b_00010100_00010100_00010100_00010100_00010100_00010100_00010100_00010100
    4 ->
      0b_00101000_00101000_00101000_00101000_00101000_00101000_00101000_00101000
    5 ->
      0b_01010000_01010000_01010000_01010000_01010000_01010000_01010000_01010000
    6 ->
      0b_10100000_10100000_10100000_10100000_10100000_10100000_10100000_10100000
    7 ->
      0b_01000000_01000000_01000000_01000000_01000000_01000000_01000000_01000000
    _ -> panic
  }
}
