import chess/piece
import chess/player
import gleam/bool
import gleam/dict
import gleam/int
import gleam/list
import gleam/option
import gleam/order
import gleam/pair
import gleam/result
import gleam/set
import gleam/string
import util/direction
import util/yielder

type Board =
  dict.Dict(Square, piece.Piece)

pub const king_file = 4

///   A8 B8 C8 D8 E8 F8 G8 H8
///   A7 B7 C7 D7 E7 F7 G7 H7
///   A6 B6 C6 D6 E6 F6 G6 H6
///   A5 B5 C5 D5 E5 F5 G5 H5
///   A4 B4 C4 D4 E4 F4 G4 H4
///   A3 B3 C3 D3 E3 F3 G3 H3
///   A2 B2 C2 D2 E2 F2 G2 H2
///   A1 B1 C1 D1 E1 F1 G1 H1
///
/// https://en.wikipedia.org/wiki/0x88
///
pub type Square =
  Int

/// See chess.js reference:
/// https://github.com/jhlywa/chess.js/blob/d68055f4dae7c06d100f21d385906743dce47abc/src/chess.ts#L205
/// https://en.wikipedia.org/wiki/0x88
///
pub fn to_ox88(square: Square) -> Int {
  square
}

pub fn get_squares() -> List(Square) {
  [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07]
  |> list.flat_map(fn(rank) {
    [0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00]
    |> list.map(int.bitwise_or(_, rank))
  })
}

/// Extracts the file of a square from 0 to 7
///
pub fn file(square: Square) -> Int {
  int.bitwise_and(square, 0x0f)
}

/// Extracts the rank of a square from 0 to 7
///
pub fn rank(square: Square) -> Int {
  // Extract the 0x_0 bit
  int.bitwise_shift_right(square, 4)
}

pub fn rank_to_string(rank: Int) -> String {
  int.to_string(rank + 1)
}

pub fn file_to_string(file: Int) -> String {
  // we can probably just use a case statement here at some point
  let assert [a] = string.to_utf_codepoints("a")
  let assert Ok(file_utf) =
    string.utf_codepoint(string.utf_codepoint_to_int(a) + file)
  string.from_utf_codepoints([file_utf])
}

pub fn to_string(square: Square) -> String {
  file_to_string(file(square)) <> rank_to_string(rank(square))
}

pub fn file_from_string(file: String) -> Result(Int, Nil) {
  let utf_codepoints = string.to_utf_codepoints(string.lowercase(file))
  use <- bool.guard(list.length(utf_codepoints) != 1, Error(Nil))
  let assert [a_utf] = string.to_utf_codepoints("a")
  let assert [file_utf] = utf_codepoints
  Ok(string.utf_codepoint_to_int(file_utf) - string.utf_codepoint_to_int(a_utf))
}

pub fn rank_from_string(rank: String) -> Result(Int, Nil) {
  use <- bool.guard(string.length(rank) != 1, Error(Nil))
  result.map(int.parse(rank), int.subtract(_, 1))
}

pub fn from_string(square: String) -> Result(Square, Nil) {
  let graphemes = string.to_graphemes(string.lowercase(square))
  use <- bool.guard(list.length(graphemes) != 2, Error(Nil))
  let assert [file_string, rank_string] = graphemes
  let file = file_from_string(file_string)
  let rank = rank_from_string(rank_string)
  case rank, file {
    Ok(rank), Ok(file) -> from_rank_file(rank, file)
    _, _ -> Error(Nil)
  }
}

/// Where rank and file are from 0 to 7
///
pub fn from_rank_file(rank: Int, file: Int) -> Result(Square, Nil) {
  case file >= 0 && file < 8 && rank >= 0 && rank < 8 {
    True -> Ok(int.bitwise_or(int.bitwise_shift_left(rank, 4), file))
    False -> Error(Nil)
  }
}

pub fn from_ox88(ox88: Int) -> Result(Square, Nil) {
  case is_valid(ox88) {
    True -> Ok(ox88)
    False -> Error(Nil)
  }
}

/// converts to a 0-63 index
/// equivalent to rank * 8 + file
pub fn to_index(square: Square) {
  int.bitwise_or(
    int.bitwise_and(0b01110000, square)
      |> int.bitwise_shift_right(1),
    int.bitwise_and(0b00000111, square),
  )
}

/// converts from a 0-63 index
/// equivalent to rank * 8 + file
pub fn from_index(index: Int) {
  // TODO: remove this assert
  let assert True = index < 64 && index >= 0
  int.bitwise_or(
    int.bitwise_and(0b00111000, index)
      |> int.bitwise_shift_left(1),
    int.bitwise_and(0b00000111, index),
  )
}

pub fn move(
  square: Square,
  direction: direction.Direction,
  distance: Int,
) -> Result(Square, Nil) {
  case direction {
    direction.Up -> 16
    direction.Down -> -16
    direction.Left -> -1
    direction.Right -> 1
  }
  * int.clamp(distance, -8, 8)
  + square
  |> from_ox88
}

pub fn add(square: Square, increment: Int) -> Result(Square, Nil) {
  let ox88 = square + increment
  from_ox88(ox88)
}

pub fn is_valid(ox88: Int) -> Bool {
  0 == int.bitwise_and(ox88, int.bitwise_not(0x77))
}

pub fn pawn_start_rank(player: player.Player) -> Int {
  case player {
    player.White -> 1
    player.Black -> 6
  }
}

pub fn pawn_promotion_rank(player: player.Player) -> Int {
  case player {
    player.White -> 7
    player.Black -> 0
  }
}

pub fn player_rank(player: player.Player) -> Int {
  case player {
    player.White -> 0
    player.Black -> 7
  }
}

/// returns the offset to slide from square1 to square2
/// 0 if not in a line
/// also returns the number of squares in between
pub fn ray_to_offset(from from: Square, to to: Square) {
  let difference = from - to
  let offset = rays(difference + 0x77)
  let steps = int.absolute_value(difference / offset)
  #(offset, steps)
}

/// Shoots a ray vertical/horizontal/diagonals
/// returns the first piece hit if it exists
/// otherwise returns error
// pub fn piece_attacking_ray(
//   occupancy: dict.Dict(Square, piece.Piece),
//   from: Square,
//   to: Square,
// ) -> Result(piece.Piece, Nil) {
//   let difference = to - from
//   use offset <- result.try({
//     case difference {
//       diff if diff % 16 == 0 -> int.clamp(diff, -16, 16) |> Ok
//       diff if diff < 8 && diff > -8 -> int.clamp(diff, -1, 1) |> Ok
//       diff if diff % 15 == 0 -> int.clamp(diff, -15, 15) |> Ok
//       diff if diff % 17 == 0 -> int.clamp(diff, -17, 17) |> Ok
//       _ -> Error(Nil)
//     }
//   })

//   [1, 2, 3, 4, 5, 6, 7, 8]
//   |> list.find_map(fn(depth) {
//     use to <- result.try(from_ox88(offset * depth + from))
//     dict.get(occupancy, to)
//   })
// }

// /// considers squares that are attackable
// /// returns a list of squares attacking until and
// /// including the first piece hit if it's the opponent's
// pub fn piece_attacking(
//   occupancy: dict.Dict(Square, piece.Piece),
//   from: Square,
//   piece: piece.Piece,
//   opponent_only: Bool,
// ) -> List(Square) {
//   let depths = case piece.symbol {
//     piece.Knight | piece.King | piece.Pawn -> [1]
//     piece.Bishop | piece.Queen | piece.Rook -> [1, 2, 3, 4, 5, 6, 7, 8]
//   }

//   let us = piece.player

//   piece_attack_offsets(piece)
//   |> list.flat_map(fn(offset) {
//     list.fold_until(depths, [], fn(acc, depth) {
//       case from_ox88(offset * depth + from) {
//         Ok(to) ->
//           case dict.get(occupancy, to), opponent_only {
//             Ok(piece.Piece(player, _)), True if player == us -> list.Stop(acc)
//             Error(Nil), _ -> list.Continue([to, ..acc])
//             _, _ -> list.Stop([to, ..acc])
//           }
//         Error(Nil) -> list.Stop(acc)
//       }
//     })
//   })
// }

/// maximum distance each piece can travel for attacking
pub fn max_attackable_distance(piece: piece.PieceSymbol) {
  case piece {
    piece.Knight | piece.King | piece.Pawn -> 1
    piece.Bishop | piece.Queen | piece.Rook -> 8
  }
}

/// calculates the squares attacked by a piece from a square
/// can optionally filter the offset
pub fn attacking_squares(
  occupancy: Board,
  from: Square,
  piece: piece.Piece,
  offset_filter: option.Option(Square),
) -> dict.Dict(Int, set.Set(Square)) {
  let us = piece.player
  let offsets = case offset_filter {
    option.Some(offset_filter) -> [offset_filter]
    option.None -> piece_attack_offsets(piece)
  }
  let distance = max_attackable_distance(piece.symbol)

  offsets
  |> list.fold(dict.new(), fn(acc, offset) {
    let squares_attacking =
      yielder.range(1, distance)
      |> yielder.fold_until(set.new(), fn(acc, depth) {
        case from_ox88(offset * depth + from) {
          Ok(to) ->
            case dict.get(occupancy, to) {
              Error(Nil) -> list.Continue(set.insert(acc, to))
              Ok(piece.Piece(player, _)) if player == us -> list.Stop(acc)
              _ -> list.Stop(set.insert(acc, to))
            }
          Error(Nil) -> list.Stop(acc)
        }
      })
    dict.insert(acc, offset, squares_attacking)
  })
}

pub fn rook_rays(from: Square) -> List(List(Square)) {
  case from {
    0 -> [[1, 2, 3, 4, 5, 6, 7], [16, 32, 48, 64, 80, 96, 112]]
    1 -> [[2, 3, 4, 5, 6, 7], [17, 33, 49, 65, 81, 97, 113], [0]]
    2 -> [[3, 4, 5, 6, 7], [18, 34, 50, 66, 82, 98, 114], [1, 0]]
    3 -> [[4, 5, 6, 7], [19, 35, 51, 67, 83, 99, 115], [2, 1, 0]]
    4 -> [[5, 6, 7], [20, 36, 52, 68, 84, 100, 116], [3, 2, 1, 0]]
    5 -> [[6, 7], [21, 37, 53, 69, 85, 101, 117], [4, 3, 2, 1, 0]]
    6 -> [[7], [22, 38, 54, 70, 86, 102, 118], [5, 4, 3, 2, 1, 0]]
    7 -> [[23, 39, 55, 71, 87, 103, 119], [6, 5, 4, 3, 2, 1, 0]]
    16 -> [[0], [17, 18, 19, 20, 21, 22, 23], [32, 48, 64, 80, 96, 112]]
    17 -> [[1], [18, 19, 20, 21, 22, 23], [33, 49, 65, 81, 97, 113], [16]]
    18 -> [[2], [19, 20, 21, 22, 23], [34, 50, 66, 82, 98, 114], [17, 16]]
    19 -> [[3], [20, 21, 22, 23], [35, 51, 67, 83, 99, 115], [18, 17, 16]]
    20 -> [[4], [21, 22, 23], [36, 52, 68, 84, 100, 116], [19, 18, 17, 16]]
    21 -> [[5], [22, 23], [37, 53, 69, 85, 101, 117], [20, 19, 18, 17, 16]]
    22 -> [[6], [23], [38, 54, 70, 86, 102, 118], [21, 20, 19, 18, 17, 16]]
    23 -> [[7], [39, 55, 71, 87, 103, 119], [22, 21, 20, 19, 18, 17, 16]]
    32 -> [[16, 0], [33, 34, 35, 36, 37, 38, 39], [48, 64, 80, 96, 112]]
    33 -> [[17, 1], [34, 35, 36, 37, 38, 39], [49, 65, 81, 97, 113], [32]]
    34 -> [[18, 2], [35, 36, 37, 38, 39], [50, 66, 82, 98, 114], [33, 32]]
    35 -> [[19, 3], [36, 37, 38, 39], [51, 67, 83, 99, 115], [34, 33, 32]]
    36 -> [[20, 4], [37, 38, 39], [52, 68, 84, 100, 116], [35, 34, 33, 32]]
    37 -> [[21, 5], [38, 39], [53, 69, 85, 101, 117], [36, 35, 34, 33, 32]]
    38 -> [[22, 6], [39], [54, 70, 86, 102, 118], [37, 36, 35, 34, 33, 32]]
    39 -> [[23, 7], [55, 71, 87, 103, 119], [38, 37, 36, 35, 34, 33, 32]]
    48 -> [[32, 16, 0], [49, 50, 51, 52, 53, 54, 55], [64, 80, 96, 112]]
    49 -> [[33, 17, 1], [50, 51, 52, 53, 54, 55], [65, 81, 97, 113], [48]]
    50 -> [[34, 18, 2], [51, 52, 53, 54, 55], [66, 82, 98, 114], [49, 48]]
    51 -> [[35, 19, 3], [52, 53, 54, 55], [67, 83, 99, 115], [50, 49, 48]]
    52 -> [[36, 20, 4], [53, 54, 55], [68, 84, 100, 116], [51, 50, 49, 48]]
    53 -> [[37, 21, 5], [54, 55], [69, 85, 101, 117], [52, 51, 50, 49, 48]]
    54 -> [[38, 22, 6], [55], [70, 86, 102, 118], [53, 52, 51, 50, 49, 48]]
    55 -> [[39, 23, 7], [71, 87, 103, 119], [54, 53, 52, 51, 50, 49, 48]]
    64 -> [[48, 32, 16, 0], [65, 66, 67, 68, 69, 70, 71], [80, 96, 112]]
    65 -> [[49, 33, 17, 1], [66, 67, 68, 69, 70, 71], [81, 97, 113], [64]]
    66 -> [[50, 34, 18, 2], [67, 68, 69, 70, 71], [82, 98, 114], [65, 64]]
    67 -> [[51, 35, 19, 3], [68, 69, 70, 71], [83, 99, 115], [66, 65, 64]]
    68 -> [[52, 36, 20, 4], [69, 70, 71], [84, 100, 116], [67, 66, 65, 64]]
    69 -> [[53, 37, 21, 5], [70, 71], [85, 101, 117], [68, 67, 66, 65, 64]]
    70 -> [[54, 38, 22, 6], [71], [86, 102, 118], [69, 68, 67, 66, 65, 64]]
    71 -> [[55, 39, 23, 7], [87, 103, 119], [70, 69, 68, 67, 66, 65, 64]]
    80 -> [[64, 48, 32, 16, 0], [81, 82, 83, 84, 85, 86, 87], [96, 112]]
    81 -> [[65, 49, 33, 17, 1], [82, 83, 84, 85, 86, 87], [97, 113], [80]]
    82 -> [[66, 50, 34, 18, 2], [83, 84, 85, 86, 87], [98, 114], [81, 80]]
    83 -> [[67, 51, 35, 19, 3], [84, 85, 86, 87], [99, 115], [82, 81, 80]]
    84 -> [[68, 52, 36, 20, 4], [85, 86, 87], [100, 116], [83, 82, 81, 80]]
    85 -> [[69, 53, 37, 21, 5], [86, 87], [101, 117], [84, 83, 82, 81, 80]]
    86 -> [[70, 54, 38, 22, 6], [87], [102, 118], [85, 84, 83, 82, 81, 80]]
    87 -> [[71, 55, 39, 23, 7], [103, 119], [86, 85, 84, 83, 82, 81, 80]]
    96 -> [[80, 64, 48, 32, 16, 0], [97, 98, 99, 100, 101, 102, 103], [112]]
    97 -> [[81, 65, 49, 33, 17, 1], [98, 99, 100, 101, 102, 103], [113], [96]]
    98 -> [[82, 66, 50, 34, 18, 2], [99, 100, 101, 102, 103], [114], [97, 96]]
    99 -> [[83, 67, 51, 35, 19, 3], [100, 101, 102, 103], [115], [98, 97, 96]]
    100 -> [[84, 68, 52, 36, 20, 4], [101, 102, 103], [116], [99, 98, 97, 96]]
    101 -> [[85, 69, 53, 37, 21, 5], [102, 103], [117], [100, 99, 98, 97, 96]]
    102 -> [[86, 70, 54, 38, 22, 6], [103], [118], [101, 100, 99, 98, 97, 96]]
    103 -> [[87, 71, 55, 39, 23, 7], [119], [102, 101, 100, 99, 98, 97, 96]]
    112 -> [[96, 80, 64, 48, 32, 16, 0], [113, 114, 115, 116, 117, 118, 119]]
    113 -> [[97, 81, 65, 49, 33, 17, 1], [114, 115, 116, 117, 118, 119], [112]]
    114 -> [[98, 82, 66, 50, 34, 18, 2], [115, 116, 117, 118, 119], [113, 112]]
    115 -> [[99, 83, 67, 51, 35, 19, 3], [116, 117, 118, 119], [114, 113, 112]]
    116 -> [[100, 84, 68, 52, 36, 20, 4], [117, 118, 119], [115, 114, 113, 112]]
    117 -> [[101, 85, 69, 53, 37, 21, 5], [118, 119], [116, 115, 114, 113, 112]]
    118 -> [[102, 86, 70, 54, 38, 22, 6], [119], [117, 116, 115, 114, 113, 112]]
    119 -> [[103, 87, 71, 55, 39, 23, 7], [118, 117, 116, 115, 114, 113, 112]]
    _ -> panic as "We fucked up"
  }
}

pub fn bishop_rays(from: Square) {
  case from {
    0 -> [[17, 34, 51, 68, 85, 102, 119]]
    1 -> [[18, 35, 52, 69, 86, 103], [16]]
    2 -> [[19, 36, 53, 70, 87], [17, 32]]
    3 -> [[20, 37, 54, 71], [18, 33, 48]]
    4 -> [[21, 38, 55], [19, 34, 49, 64]]
    5 -> [[22, 39], [20, 35, 50, 65, 80]]
    6 -> [[23], [21, 36, 51, 66, 81, 96]]
    7 -> [[22, 37, 52, 67, 82, 97, 112]]
    16 -> [[1], [33, 50, 67, 84, 101, 118]]
    17 -> [[0], [2], [34, 51, 68, 85, 102, 119], [32]]
    18 -> [[1], [3], [35, 52, 69, 86, 103], [33, 48]]
    19 -> [[2], [4], [36, 53, 70, 87], [34, 49, 64]]
    20 -> [[3], [5], [37, 54, 71], [35, 50, 65, 80]]
    21 -> [[4], [6], [38, 55], [36, 51, 66, 81, 96]]
    22 -> [[5], [7], [39], [37, 52, 67, 82, 97, 112]]
    23 -> [[6], [38, 53, 68, 83, 98, 113]]
    32 -> [[17, 2], [49, 66, 83, 100, 117]]
    33 -> [[16], [18, 3], [50, 67, 84, 101, 118], [48]]
    34 -> [[17, 0], [19, 4], [51, 68, 85, 102, 119], [49, 64]]
    35 -> [[18, 1], [20, 5], [52, 69, 86, 103], [50, 65, 80]]
    36 -> [[19, 2], [21, 6], [53, 70, 87], [51, 66, 81, 96]]
    37 -> [[20, 3], [22, 7], [54, 71], [52, 67, 82, 97, 112]]
    38 -> [[21, 4], [23], [55], [53, 68, 83, 98, 113]]
    39 -> [[22, 5], [54, 69, 84, 99, 114]]
    48 -> [[33, 18, 3], [65, 82, 99, 116]]
    49 -> [[32], [34, 19, 4], [66, 83, 100, 117], [64]]
    50 -> [[33, 16], [35, 20, 5], [67, 84, 101, 118], [65, 80]]
    51 -> [[34, 17, 0], [36, 21, 6], [68, 85, 102, 119], [66, 81, 96]]
    52 -> [[35, 18, 1], [37, 22, 7], [69, 86, 103], [67, 82, 97, 112]]
    53 -> [[36, 19, 2], [38, 23], [70, 87], [68, 83, 98, 113]]
    54 -> [[37, 20, 3], [39], [71], [69, 84, 99, 114]]
    55 -> [[38, 21, 4], [70, 85, 100, 115]]
    64 -> [[49, 34, 19, 4], [81, 98, 115]]
    65 -> [[48], [50, 35, 20, 5], [82, 99, 116], [80]]
    66 -> [[49, 32], [51, 36, 21, 6], [83, 100, 117], [81, 96]]
    67 -> [[50, 33, 16], [52, 37, 22, 7], [84, 101, 118], [82, 97, 112]]
    68 -> [[51, 34, 17, 0], [53, 38, 23], [85, 102, 119], [83, 98, 113]]
    69 -> [[52, 35, 18, 1], [54, 39], [86, 103], [84, 99, 114]]
    70 -> [[53, 36, 19, 2], [55], [87], [85, 100, 115]]
    71 -> [[54, 37, 20, 3], [86, 101, 116]]
    80 -> [[65, 50, 35, 20, 5], [97, 114]]
    81 -> [[64], [66, 51, 36, 21, 6], [98, 115], [96]]
    82 -> [[65, 48], [67, 52, 37, 22, 7], [99, 116], [97, 112]]
    83 -> [[66, 49, 32], [68, 53, 38, 23], [100, 117], [98, 113]]
    84 -> [[67, 50, 33, 16], [69, 54, 39], [101, 118], [99, 114]]
    85 -> [[68, 51, 34, 17, 0], [70, 55], [102, 119], [100, 115]]
    86 -> [[69, 52, 35, 18, 1], [71], [103], [101, 116]]
    87 -> [[70, 53, 36, 19, 2], [102, 117]]
    96 -> [[81, 66, 51, 36, 21, 6], [113]]
    97 -> [[80], [82, 67, 52, 37, 22, 7], [114], [112]]
    98 -> [[81, 64], [83, 68, 53, 38, 23], [115], [113]]
    99 -> [[82, 65, 48], [84, 69, 54, 39], [116], [114]]
    100 -> [[83, 66, 49, 32], [85, 70, 55], [117], [115]]
    101 -> [[84, 67, 50, 33, 16], [86, 71], [118], [116]]
    102 -> [[85, 68, 51, 34, 17, 0], [87], [119], [117]]
    103 -> [[86, 69, 52, 35, 18, 1], [118]]
    112 -> [[97, 82, 67, 52, 37, 22, 7]]
    113 -> [[96], [98, 83, 68, 53, 38, 23]]
    114 -> [[97, 80], [99, 84, 69, 54, 39]]
    115 -> [[98, 81, 64], [100, 85, 70, 55]]
    116 -> [[99, 82, 65, 48], [101, 86, 71]]
    117 -> [[100, 83, 66, 49, 32], [102, 87]]
    118 -> [[101, 84, 67, 50, 33, 16], [103]]
    119 -> [[102, 85, 68, 51, 34, 17, 0]]
    _ -> panic as "We fucked up"
  }
}

pub fn queen_rays(from: Square) {
  case from {
    0 -> [
      [1, 2, 3, 4, 5, 6, 7],
      [17, 34, 51, 68, 85, 102, 119],
      [16, 32, 48, 64, 80, 96, 112],
    ]
    1 -> [
      [2, 3, 4, 5, 6, 7],
      [18, 35, 52, 69, 86, 103],
      [17, 33, 49, 65, 81, 97, 113],
      [16],
      [0],
    ]
    2 -> [
      [3, 4, 5, 6, 7],
      [19, 36, 53, 70, 87],
      [18, 34, 50, 66, 82, 98, 114],
      [17, 32],
      [1, 0],
    ]
    3 -> [
      [4, 5, 6, 7],
      [20, 37, 54, 71],
      [19, 35, 51, 67, 83, 99, 115],
      [18, 33, 48],
      [2, 1, 0],
    ]
    4 -> [
      [5, 6, 7],
      [21, 38, 55],
      [20, 36, 52, 68, 84, 100, 116],
      [19, 34, 49, 64],
      [3, 2, 1, 0],
    ]
    5 -> [
      [6, 7],
      [22, 39],
      [21, 37, 53, 69, 85, 101, 117],
      [20, 35, 50, 65, 80],
      [4, 3, 2, 1, 0],
    ]
    6 -> [
      [7],
      [23],
      [22, 38, 54, 70, 86, 102, 118],
      [21, 36, 51, 66, 81, 96],
      [5, 4, 3, 2, 1, 0],
    ]
    7 -> [
      [23, 39, 55, 71, 87, 103, 119],
      [22, 37, 52, 67, 82, 97, 112],
      [6, 5, 4, 3, 2, 1, 0],
    ]
    16 -> [
      [0],
      [1],
      [17, 18, 19, 20, 21, 22, 23],
      [33, 50, 67, 84, 101, 118],
      [32, 48, 64, 80, 96, 112],
    ]
    17 -> [
      [0],
      [1],
      [2],
      [18, 19, 20, 21, 22, 23],
      [34, 51, 68, 85, 102, 119],
      [33, 49, 65, 81, 97, 113],
      [32],
      [16],
    ]
    18 -> [
      [1],
      [2],
      [3],
      [19, 20, 21, 22, 23],
      [35, 52, 69, 86, 103],
      [34, 50, 66, 82, 98, 114],
      [33, 48],
      [17, 16],
    ]
    19 -> [
      [2],
      [3],
      [4],
      [20, 21, 22, 23],
      [36, 53, 70, 87],
      [35, 51, 67, 83, 99, 115],
      [34, 49, 64],
      [18, 17, 16],
    ]
    20 -> [
      [3],
      [4],
      [5],
      [21, 22, 23],
      [37, 54, 71],
      [36, 52, 68, 84, 100, 116],
      [35, 50, 65, 80],
      [19, 18, 17, 16],
    ]
    21 -> [
      [4],
      [5],
      [6],
      [22, 23],
      [38, 55],
      [37, 53, 69, 85, 101, 117],
      [36, 51, 66, 81, 96],
      [20, 19, 18, 17, 16],
    ]
    22 -> [
      [5],
      [6],
      [7],
      [23],
      [39],
      [38, 54, 70, 86, 102, 118],
      [37, 52, 67, 82, 97, 112],
      [21, 20, 19, 18, 17, 16],
    ]
    23 -> [
      [6],
      [7],
      [39, 55, 71, 87, 103, 119],
      [38, 53, 68, 83, 98, 113],
      [22, 21, 20, 19, 18, 17, 16],
    ]
    32 -> [
      [16, 0],
      [17, 2],
      [33, 34, 35, 36, 37, 38, 39],
      [49, 66, 83, 100, 117],
      [48, 64, 80, 96, 112],
    ]
    33 -> [
      [16],
      [17, 1],
      [18, 3],
      [34, 35, 36, 37, 38, 39],
      [50, 67, 84, 101, 118],
      [49, 65, 81, 97, 113],
      [48],
      [32],
    ]
    34 -> [
      [17, 0],
      [18, 2],
      [19, 4],
      [35, 36, 37, 38, 39],
      [51, 68, 85, 102, 119],
      [50, 66, 82, 98, 114],
      [49, 64],
      [33, 32],
    ]
    35 -> [
      [18, 1],
      [19, 3],
      [20, 5],
      [36, 37, 38, 39],
      [52, 69, 86, 103],
      [51, 67, 83, 99, 115],
      [50, 65, 80],
      [34, 33, 32],
    ]
    36 -> [
      [19, 2],
      [20, 4],
      [21, 6],
      [37, 38, 39],
      [53, 70, 87],
      [52, 68, 84, 100, 116],
      [51, 66, 81, 96],
      [35, 34, 33, 32],
    ]
    37 -> [
      [20, 3],
      [21, 5],
      [22, 7],
      [38, 39],
      [54, 71],
      [53, 69, 85, 101, 117],
      [52, 67, 82, 97, 112],
      [36, 35, 34, 33, 32],
    ]
    38 -> [
      [21, 4],
      [22, 6],
      [23],
      [39],
      [55],
      [54, 70, 86, 102, 118],
      [53, 68, 83, 98, 113],
      [37, 36, 35, 34, 33, 32],
    ]
    39 -> [
      [22, 5],
      [23, 7],
      [55, 71, 87, 103, 119],
      [54, 69, 84, 99, 114],
      [38, 37, 36, 35, 34, 33, 32],
    ]
    48 -> [
      [32, 16, 0],
      [33, 18, 3],
      [49, 50, 51, 52, 53, 54, 55],
      [65, 82, 99, 116],
      [64, 80, 96, 112],
    ]
    49 -> [
      [32],
      [33, 17, 1],
      [34, 19, 4],
      [50, 51, 52, 53, 54, 55],
      [66, 83, 100, 117],
      [65, 81, 97, 113],
      [64],
      [48],
    ]
    50 -> [
      [33, 16],
      [34, 18, 2],
      [35, 20, 5],
      [51, 52, 53, 54, 55],
      [67, 84, 101, 118],
      [66, 82, 98, 114],
      [65, 80],
      [49, 48],
    ]
    51 -> [
      [34, 17, 0],
      [35, 19, 3],
      [36, 21, 6],
      [52, 53, 54, 55],
      [68, 85, 102, 119],
      [67, 83, 99, 115],
      [66, 81, 96],
      [50, 49, 48],
    ]
    52 -> [
      [35, 18, 1],
      [36, 20, 4],
      [37, 22, 7],
      [53, 54, 55],
      [69, 86, 103],
      [68, 84, 100, 116],
      [67, 82, 97, 112],
      [51, 50, 49, 48],
    ]
    53 -> [
      [36, 19, 2],
      [37, 21, 5],
      [38, 23],
      [54, 55],
      [70, 87],
      [69, 85, 101, 117],
      [68, 83, 98, 113],
      [52, 51, 50, 49, 48],
    ]
    54 -> [
      [37, 20, 3],
      [38, 22, 6],
      [39],
      [55],
      [71],
      [70, 86, 102, 118],
      [69, 84, 99, 114],
      [53, 52, 51, 50, 49, 48],
    ]
    55 -> [
      [38, 21, 4],
      [39, 23, 7],
      [71, 87, 103, 119],
      [70, 85, 100, 115],
      [54, 53, 52, 51, 50, 49, 48],
    ]
    64 -> [
      [48, 32, 16, 0],
      [49, 34, 19, 4],
      [65, 66, 67, 68, 69, 70, 71],
      [81, 98, 115],
      [80, 96, 112],
    ]
    65 -> [
      [48],
      [49, 33, 17, 1],
      [50, 35, 20, 5],
      [66, 67, 68, 69, 70, 71],
      [82, 99, 116],
      [81, 97, 113],
      [80],
      [64],
    ]
    66 -> [
      [49, 32],
      [50, 34, 18, 2],
      [51, 36, 21, 6],
      [67, 68, 69, 70, 71],
      [83, 100, 117],
      [82, 98, 114],
      [81, 96],
      [65, 64],
    ]
    67 -> [
      [50, 33, 16],
      [51, 35, 19, 3],
      [52, 37, 22, 7],
      [68, 69, 70, 71],
      [84, 101, 118],
      [83, 99, 115],
      [82, 97, 112],
      [66, 65, 64],
    ]
    68 -> [
      [51, 34, 17, 0],
      [52, 36, 20, 4],
      [53, 38, 23],
      [69, 70, 71],
      [85, 102, 119],
      [84, 100, 116],
      [83, 98, 113],
      [67, 66, 65, 64],
    ]
    69 -> [
      [52, 35, 18, 1],
      [53, 37, 21, 5],
      [54, 39],
      [70, 71],
      [86, 103],
      [85, 101, 117],
      [84, 99, 114],
      [68, 67, 66, 65, 64],
    ]
    70 -> [
      [53, 36, 19, 2],
      [54, 38, 22, 6],
      [55],
      [71],
      [87],
      [86, 102, 118],
      [85, 100, 115],
      [69, 68, 67, 66, 65, 64],
    ]
    71 -> [
      [54, 37, 20, 3],
      [55, 39, 23, 7],
      [87, 103, 119],
      [86, 101, 116],
      [70, 69, 68, 67, 66, 65, 64],
    ]
    80 -> [
      [64, 48, 32, 16, 0],
      [65, 50, 35, 20, 5],
      [81, 82, 83, 84, 85, 86, 87],
      [97, 114],
      [96, 112],
    ]
    81 -> [
      [64],
      [65, 49, 33, 17, 1],
      [66, 51, 36, 21, 6],
      [82, 83, 84, 85, 86, 87],
      [98, 115],
      [97, 113],
      [96],
      [80],
    ]
    82 -> [
      [65, 48],
      [66, 50, 34, 18, 2],
      [67, 52, 37, 22, 7],
      [83, 84, 85, 86, 87],
      [99, 116],
      [98, 114],
      [97, 112],
      [81, 80],
    ]
    83 -> [
      [66, 49, 32],
      [67, 51, 35, 19, 3],
      [68, 53, 38, 23],
      [84, 85, 86, 87],
      [100, 117],
      [99, 115],
      [98, 113],
      [82, 81, 80],
    ]
    84 -> [
      [67, 50, 33, 16],
      [68, 52, 36, 20, 4],
      [69, 54, 39],
      [85, 86, 87],
      [101, 118],
      [100, 116],
      [99, 114],
      [83, 82, 81, 80],
    ]
    85 -> [
      [68, 51, 34, 17, 0],
      [69, 53, 37, 21, 5],
      [70, 55],
      [86, 87],
      [102, 119],
      [101, 117],
      [100, 115],
      [84, 83, 82, 81, 80],
    ]
    86 -> [
      [69, 52, 35, 18, 1],
      [70, 54, 38, 22, 6],
      [71],
      [87],
      [103],
      [102, 118],
      [101, 116],
      [85, 84, 83, 82, 81, 80],
    ]
    87 -> [
      [70, 53, 36, 19, 2],
      [71, 55, 39, 23, 7],
      [103, 119],
      [102, 117],
      [86, 85, 84, 83, 82, 81, 80],
    ]
    96 -> [
      [80, 64, 48, 32, 16, 0],
      [81, 66, 51, 36, 21, 6],
      [97, 98, 99, 100, 101, 102, 103],
      [113],
      [112],
    ]
    97 -> [
      [80],
      [81, 65, 49, 33, 17, 1],
      [82, 67, 52, 37, 22, 7],
      [98, 99, 100, 101, 102, 103],
      [114],
      [113],
      [112],
      [96],
    ]
    98 -> [
      [81, 64],
      [82, 66, 50, 34, 18, 2],
      [83, 68, 53, 38, 23],
      [99, 100, 101, 102, 103],
      [115],
      [114],
      [113],
      [97, 96],
    ]
    99 -> [
      [82, 65, 48],
      [83, 67, 51, 35, 19, 3],
      [84, 69, 54, 39],
      [100, 101, 102, 103],
      [116],
      [115],
      [114],
      [98, 97, 96],
    ]
    100 -> [
      [83, 66, 49, 32],
      [84, 68, 52, 36, 20, 4],
      [85, 70, 55],
      [101, 102, 103],
      [117],
      [116],
      [115],
      [99, 98, 97, 96],
    ]
    101 -> [
      [84, 67, 50, 33, 16],
      [85, 69, 53, 37, 21, 5],
      [86, 71],
      [102, 103],
      [118],
      [117],
      [116],
      [100, 99, 98, 97, 96],
    ]
    102 -> [
      [85, 68, 51, 34, 17, 0],
      [86, 70, 54, 38, 22, 6],
      [87],
      [103],
      [119],
      [118],
      [117],
      [101, 100, 99, 98, 97, 96],
    ]
    103 -> [
      [86, 69, 52, 35, 18, 1],
      [87, 71, 55, 39, 23, 7],
      [119],
      [118],
      [102, 101, 100, 99, 98, 97, 96],
    ]
    112 -> [
      [96, 80, 64, 48, 32, 16, 0],
      [97, 82, 67, 52, 37, 22, 7],
      [113, 114, 115, 116, 117, 118, 119],
    ]
    113 -> [
      [96],
      [97, 81, 65, 49, 33, 17, 1],
      [98, 83, 68, 53, 38, 23],
      [114, 115, 116, 117, 118, 119],
      [112],
    ]
    114 -> [
      [97, 80],
      [98, 82, 66, 50, 34, 18, 2],
      [99, 84, 69, 54, 39],
      [115, 116, 117, 118, 119],
      [113, 112],
    ]
    115 -> [
      [98, 81, 64],
      [99, 83, 67, 51, 35, 19, 3],
      [100, 85, 70, 55],
      [116, 117, 118, 119],
      [114, 113, 112],
    ]
    116 -> [
      [99, 82, 65, 48],
      [100, 84, 68, 52, 36, 20, 4],
      [101, 86, 71],
      [117, 118, 119],
      [115, 114, 113, 112],
    ]
    117 -> [
      [100, 83, 66, 49, 32],
      [101, 85, 69, 53, 37, 21, 5],
      [102, 87],
      [118, 119],
      [116, 115, 114, 113, 112],
    ]
    118 -> [
      [101, 84, 67, 50, 33, 16],
      [102, 86, 70, 54, 38, 22, 6],
      [103],
      [119],
      [117, 116, 115, 114, 113, 112],
    ]
    119 -> [
      [102, 85, 68, 51, 34, 17, 0],
      [103, 87, 71, 55, 39, 23, 7],
      [118, 117, 116, 115, 114, 113, 112],
    ]
    _ -> panic as "We fucked up"
  }
}

pub fn king_moves(from: Square) {
  case from {
    0 -> [1, 17, 16]
    1 -> [2, 18, 17, 16, 0]
    2 -> [3, 19, 18, 17, 1]
    3 -> [4, 20, 19, 18, 2]
    4 -> [5, 21, 20, 19, 3]
    5 -> [6, 22, 21, 20, 4]
    6 -> [7, 23, 22, 21, 5]
    7 -> [23, 22, 6]
    16 -> [0, 1, 17, 33, 32]
    17 -> [0, 1, 2, 18, 34, 33, 32, 16]
    18 -> [1, 2, 3, 19, 35, 34, 33, 17]
    19 -> [2, 3, 4, 20, 36, 35, 34, 18]
    20 -> [3, 4, 5, 21, 37, 36, 35, 19]
    21 -> [4, 5, 6, 22, 38, 37, 36, 20]
    22 -> [5, 6, 7, 23, 39, 38, 37, 21]
    23 -> [6, 7, 39, 38, 22]
    32 -> [16, 17, 33, 49, 48]
    33 -> [16, 17, 18, 34, 50, 49, 48, 32]
    34 -> [17, 18, 19, 35, 51, 50, 49, 33]
    35 -> [18, 19, 20, 36, 52, 51, 50, 34]
    36 -> [19, 20, 21, 37, 53, 52, 51, 35]
    37 -> [20, 21, 22, 38, 54, 53, 52, 36]
    38 -> [21, 22, 23, 39, 55, 54, 53, 37]
    39 -> [22, 23, 55, 54, 38]
    48 -> [32, 33, 49, 65, 64]
    49 -> [32, 33, 34, 50, 66, 65, 64, 48]
    50 -> [33, 34, 35, 51, 67, 66, 65, 49]
    51 -> [34, 35, 36, 52, 68, 67, 66, 50]
    52 -> [35, 36, 37, 53, 69, 68, 67, 51]
    53 -> [36, 37, 38, 54, 70, 69, 68, 52]
    54 -> [37, 38, 39, 55, 71, 70, 69, 53]
    55 -> [38, 39, 71, 70, 54]
    64 -> [48, 49, 65, 81, 80]
    65 -> [48, 49, 50, 66, 82, 81, 80, 64]
    66 -> [49, 50, 51, 67, 83, 82, 81, 65]
    67 -> [50, 51, 52, 68, 84, 83, 82, 66]
    68 -> [51, 52, 53, 69, 85, 84, 83, 67]
    69 -> [52, 53, 54, 70, 86, 85, 84, 68]
    70 -> [53, 54, 55, 71, 87, 86, 85, 69]
    71 -> [54, 55, 87, 86, 70]
    80 -> [64, 65, 81, 97, 96]
    81 -> [64, 65, 66, 82, 98, 97, 96, 80]
    82 -> [65, 66, 67, 83, 99, 98, 97, 81]
    83 -> [66, 67, 68, 84, 100, 99, 98, 82]
    84 -> [67, 68, 69, 85, 101, 100, 99, 83]
    85 -> [68, 69, 70, 86, 102, 101, 100, 84]
    86 -> [69, 70, 71, 87, 103, 102, 101, 85]
    87 -> [70, 71, 103, 102, 86]
    96 -> [80, 81, 97, 113, 112]
    97 -> [80, 81, 82, 98, 114, 113, 112, 96]
    98 -> [81, 82, 83, 99, 115, 114, 113, 97]
    99 -> [82, 83, 84, 100, 116, 115, 114, 98]
    100 -> [83, 84, 85, 101, 117, 116, 115, 99]
    101 -> [84, 85, 86, 102, 118, 117, 116, 100]
    102 -> [85, 86, 87, 103, 119, 118, 117, 101]
    103 -> [86, 87, 119, 118, 102]
    112 -> [96, 97, 113]
    113 -> [96, 97, 98, 114, 112]
    114 -> [97, 98, 99, 115, 113]
    115 -> [98, 99, 100, 116, 114]
    116 -> [99, 100, 101, 117, 115]
    117 -> [100, 101, 102, 118, 116]
    118 -> [101, 102, 103, 119, 117]
    119 -> [102, 103, 118]
    _ -> panic as "We fucked up"
  }
}

pub fn knight_moves(from: Square) -> List(Square) {
  case from {
    0 -> [18, 33]
    1 -> [19, 34, 32]
    2 -> [20, 35, 33, 16]
    3 -> [21, 36, 34, 17]
    4 -> [22, 37, 35, 18]
    5 -> [23, 38, 36, 19]
    6 -> [39, 37, 20]
    7 -> [38, 21]
    16 -> [2, 34, 49]
    17 -> [3, 35, 50, 48]
    18 -> [0, 4, 36, 51, 49, 32]
    19 -> [1, 5, 37, 52, 50, 33]
    20 -> [2, 6, 38, 53, 51, 34]
    21 -> [3, 7, 39, 54, 52, 35]
    22 -> [4, 55, 53, 36]
    23 -> [5, 54, 37]
    32 -> [1, 18, 50, 65]
    33 -> [0, 2, 19, 51, 66, 64]
    34 -> [16, 1, 3, 20, 52, 67, 65, 48]
    35 -> [17, 2, 4, 21, 53, 68, 66, 49]
    36 -> [18, 3, 5, 22, 54, 69, 67, 50]
    37 -> [19, 4, 6, 23, 55, 70, 68, 51]
    38 -> [20, 5, 7, 71, 69, 52]
    39 -> [21, 6, 70, 53]
    48 -> [17, 34, 66, 81]
    49 -> [16, 18, 35, 67, 82, 80]
    50 -> [32, 17, 19, 36, 68, 83, 81, 64]
    51 -> [33, 18, 20, 37, 69, 84, 82, 65]
    52 -> [34, 19, 21, 38, 70, 85, 83, 66]
    53 -> [35, 20, 22, 39, 71, 86, 84, 67]
    54 -> [36, 21, 23, 87, 85, 68]
    55 -> [37, 22, 86, 69]
    64 -> [33, 50, 82, 97]
    65 -> [32, 34, 51, 83, 98, 96]
    66 -> [48, 33, 35, 52, 84, 99, 97, 80]
    67 -> [49, 34, 36, 53, 85, 100, 98, 81]
    68 -> [50, 35, 37, 54, 86, 101, 99, 82]
    69 -> [51, 36, 38, 55, 87, 102, 100, 83]
    70 -> [52, 37, 39, 103, 101, 84]
    71 -> [53, 38, 102, 85]
    80 -> [49, 66, 98, 113]
    81 -> [48, 50, 67, 99, 114, 112]
    82 -> [64, 49, 51, 68, 100, 115, 113, 96]
    83 -> [65, 50, 52, 69, 101, 116, 114, 97]
    84 -> [66, 51, 53, 70, 102, 117, 115, 98]
    85 -> [67, 52, 54, 71, 103, 118, 116, 99]
    86 -> [68, 53, 55, 119, 117, 100]
    87 -> [69, 54, 118, 101]
    96 -> [65, 82, 114]
    97 -> [64, 66, 83, 115]
    98 -> [80, 65, 67, 84, 116, 112]
    99 -> [81, 66, 68, 85, 117, 113]
    100 -> [82, 67, 69, 86, 118, 114]
    101 -> [83, 68, 70, 87, 119, 115]
    102 -> [84, 69, 71, 116]
    103 -> [85, 70, 117]
    112 -> [81, 98]
    113 -> [80, 82, 99]
    114 -> [96, 81, 83, 100]
    115 -> [97, 82, 84, 101]
    116 -> [98, 83, 85, 102]
    117 -> [99, 84, 86, 103]
    118 -> [100, 85, 87]
    119 -> [101, 86]
    _ -> panic as "We fucked up"
  }
}

pub fn pawn_empty_moves(from: Square, player: player.Player) {
  case player {
    player.White ->
      case from {
        39 -> [55]
        69 -> [85]
        67 -> [83]
        50 -> [66]
        22 -> [38, 54]
        102 -> [118]
        51 -> [67]
        85 -> [101]
        21 -> [37, 53]
        86 -> [102]
        16 -> [32, 48]
        53 -> [69]
        33 -> [49]
        37 -> [53]
        17 -> [33, 49]
        48 -> [64]
        81 -> [97]
        83 -> [99]
        87 -> [103]
        20 -> [36, 52]
        32 -> [48]
        97 -> [113]
        36 -> [52]
        35 -> [51]
        80 -> [96]
        64 -> [80]
        66 -> [82]
        71 -> [87]
        103 -> [119]
        49 -> [65]
        82 -> [98]
        23 -> [39, 55]
        101 -> [117]
        70 -> [86]
        65 -> [81]
        99 -> [115]
        38 -> [54]
        98 -> [114]
        55 -> [71]
        100 -> [116]
        19 -> [35, 51]
        52 -> [68]
        34 -> [50]
        68 -> [84]
        84 -> [100]
        96 -> [112]
        18 -> [34, 50]
        54 -> [70]
        _ -> panic as "We fucked up"
      }
    player.Black ->
      case from {
        39 -> [23]
        69 -> [53]
        67 -> [51]
        50 -> [34]
        22 -> [6]
        102 -> [86, 70]
        51 -> [35]
        85 -> [69]
        21 -> [5]
        86 -> [70]
        16 -> [0]
        53 -> [37]
        33 -> [17]
        37 -> [21]
        17 -> [1]
        48 -> [32]
        81 -> [65]
        83 -> [67]
        87 -> [71]
        20 -> [4]
        32 -> [16]
        97 -> [81, 65]
        36 -> [20]
        35 -> [19]
        80 -> [64]
        64 -> [48]
        66 -> [50]
        71 -> [55]
        103 -> [87, 71]
        49 -> [33]
        82 -> [66]
        23 -> [7]
        101 -> [85, 69]
        70 -> [54]
        65 -> [49]
        99 -> [83, 67]
        38 -> [22]
        98 -> [82, 66]
        55 -> [39]
        100 -> [84, 68]
        19 -> [3]
        52 -> [36]
        34 -> [18]
        68 -> [52]
        84 -> [68]
        96 -> [80, 64]
        18 -> [2]
        54 -> [38]
        _ -> panic as "We fucked up"
      }
  }
}

pub fn pawn_capture_moves(from: Square, player: player.Player) {
  case player {
    player.White ->
      case from {
        39 -> [54]
        69 -> [86, 84]
        67 -> [84, 82]
        50 -> [67, 65]
        22 -> [39, 37]
        102 -> [119, 117]
        51 -> [68, 66]
        85 -> [102, 100]
        21 -> [38, 36]
        86 -> [103, 101]
        16 -> [33]
        53 -> [70, 68]
        33 -> [50, 48]
        37 -> [54, 52]
        17 -> [34, 32]
        48 -> [65]
        81 -> [98, 96]
        83 -> [100, 98]
        87 -> [102]
        20 -> [37, 35]
        32 -> [49]
        97 -> [114, 112]
        36 -> [53, 51]
        35 -> [52, 50]
        80 -> [97]
        64 -> [81]
        66 -> [83, 81]
        71 -> [86]
        103 -> [118]
        49 -> [66, 64]
        82 -> [99, 97]
        23 -> [38]
        101 -> [118, 116]
        70 -> [87, 85]
        65 -> [82, 80]
        99 -> [116, 114]
        38 -> [55, 53]
        98 -> [115, 113]
        55 -> [70]
        100 -> [117, 115]
        19 -> [36, 34]
        52 -> [69, 67]
        34 -> [51, 49]
        68 -> [85, 83]
        84 -> [101, 99]
        96 -> [113]
        18 -> [35, 33]
        54 -> [71, 69]
        _ -> panic as "We fucked up"
      }
    player.Black ->
      case from {
        39 -> [22]
        69 -> [52, 54]
        67 -> [50, 52]
        50 -> [33, 35]
        22 -> [5, 7]
        102 -> [85, 87]
        51 -> [34, 36]
        85 -> [68, 70]
        21 -> [4, 6]
        86 -> [69, 71]
        16 -> [1]
        53 -> [36, 38]
        33 -> [16, 18]
        37 -> [20, 22]
        17 -> [0, 2]
        48 -> [33]
        81 -> [64, 66]
        83 -> [66, 68]
        87 -> [70]
        20 -> [3, 5]
        32 -> [17]
        97 -> [80, 82]
        36 -> [19, 21]
        35 -> [18, 20]
        80 -> [65]
        64 -> [49]
        66 -> [49, 51]
        71 -> [54]
        103 -> [86]
        49 -> [32, 34]
        82 -> [65, 67]
        23 -> [6]
        101 -> [84, 86]
        70 -> [53, 55]
        65 -> [48, 50]
        99 -> [82, 84]
        38 -> [21, 23]
        98 -> [81, 83]
        55 -> [38]
        100 -> [83, 85]
        19 -> [2, 4]
        52 -> [35, 37]
        34 -> [17, 19]
        68 -> [51, 53]
        84 -> [67, 69]
        96 -> [81]
        18 -> [1, 3]
        54 -> [37, 39]
        _ -> panic as "We fucked up"
      }
  }
}

pub fn get_squares_attacking_at(
  board: Board,
  at: Square,
  by: player.Player,
) -> List(Square) {
  board
  |> dict.fold([], fn(acc, from, piece) {
    // We only consider attacks by a certain player
    use <- bool.guard(piece.player != by, acc)

    let difference = from - at
    // skip if to/from square are the same
    use <- bool.guard(difference == 0, acc)

    // This index is used for `attacks` and `rays`, where a difference of 0 corresponds to the centre
    let index = difference + 0x77

    // `attacks` lets us index which type of piece can attack from that square
    // if it's not the piece we currently have, we just return
    use <- bool.guard(
      int.bitwise_and(attacks(index), piece_masks(piece.symbol)) == 0,
      acc,
    )

    let x = case piece.symbol {
      // Knights and Kings can't be blocked
      piece.Knight | piece.King -> Ok(from)
      // Pawns can't be blocked
      piece.Pawn ->
        // Pawns can only attack forwards, so we check which side they're on
        case piece.player, int.compare(difference, 0) {
          player.Black, order.Gt | player.White, order.Lt -> Ok(from)
          _, _ -> Error(Nil)
        }
      // These slide, so we check if their path is empty
      piece.Bishop | piece.Queen | piece.Rook -> {
        let offset = rays(index)

        let first = from
        let last = at - offset
        let iterations = { last - first } / offset
        use <- bool.guard(iterations <= 0, Ok(from))
        let is_attacking =
          yielder.iterate(first + offset, int.add(_, offset))
          |> yielder.take(iterations)
          |> yielder.all(fn(ox88) { dict.get(board, ox88) |> result.is_error })

        case is_attacking {
          True -> Ok(from)
          False -> Error(Nil)
        }
      }
    }
    case x {
      Ok(x) -> [x, ..acc]
      _ -> acc
    }
  })
}

/// calculates all attacks (and pinned pieces from attacks) to a certain square
/// Does not handle en passant specialcase, that is specially checked later on
/// This is for determining if the king is in check
/// Returns a list of attackers as well as pinned piece if it exists
pub fn attacks_and_pins_to(
  board: Board,
  at: Square,
  by: player.Player,
) -> List(#(Square, option.Option(Square))) {
  board
  |> dict.fold([], fn(acc, from, piece) {
    // We only consider attacks by a certain player
    use <- bool.guard(piece.player != by, acc)

    let difference = from - at
    // skip if to/from square are the same
    use <- bool.guard(difference == 0, acc)

    // This index is used for `attacks` and `rays`, where a difference of 0 corresponds to the centre
    let index = difference + 0x77

    // `attacks` lets us index which type of piece can attack from that square
    // if it's not the piece we currently have, we just return
    use <- bool.guard(
      int.bitwise_and(attacks(index), piece_masks(piece.symbol)) == 0,
      acc,
    )

    let x = case piece.symbol {
      // Knights and Kings can't be blocked
      piece.Knight | piece.King -> Ok(#(from, option.None))
      // Pawns can't be blocked
      piece.Pawn ->
        // Pawns can only attack forwards, so we check which side they're on
        case piece.player, int.compare(difference, 0) {
          player.Black, order.Gt | player.White, order.Lt ->
            Ok(#(from, option.None))
          _, _ -> Error(Nil)
        }
      // These slide, so we check if their path is empty
      piece.Bishop | piece.Queen | piece.Rook -> {
        let offset = rays(index)

        let first = from + offset
        let last = at - offset
        let iterations = { { last - first } / offset } + 1
        use <- bool.guard(iterations <= 0, Ok(#(from, option.None)))
        // We shoot two rays, one from from -> to, then to -> from, if the piece is the same and "ours"
        // Then that is a pinned piece
        let source_to_target_piece =
          yielder.iterate(first, int.add(_, offset))
          |> yielder.take(iterations)
          |> yielder.find_map(fn(ox88) {
            dict.get(board, ox88) |> result.map(pair.new(ox88, _))
          })

        use <- bool.guard(
          source_to_target_piece |> result.is_error,
          Ok(#(from, option.None)),
        )
        case source_to_target_piece {
          Error(Nil) -> Ok(#(from, option.None))
          Ok(#(first_hit_square, piece)) -> {
            use <- bool.guard(piece.player == by, Error(Nil))
            // shoot the second ray
            let target_to_source_piece =
              yielder.iterate(last, int.subtract(_, offset))
              |> yielder.take(iterations)
              |> yielder.find(fn(ox88) { dict.get(board, ox88) |> result.is_ok })
            // if the first hit, then this must hit as well
            let assert Ok(second_hit_square) = target_to_source_piece
            use <- bool.guard(second_hit_square != first_hit_square, Error(Nil))
            Ok(#(from, option.Some(first_hit_square)))
          }
        }
      }
    }
    case x {
      Ok(x) -> [x, ..acc]
      _ -> acc
    }
  })
}

// BEGIN: CONSTANTS

/// Gets the ox88 offsets of each piece's "one space" moves
/// Considers attacks only (so only x moves for pawns)
pub fn piece_attack_offsets(piece: piece.Piece) {
  case piece.symbol {
    piece.Knight -> [-18, -33, -31, -14, 18, 33, 31, 14]
    piece.Bishop -> [-17, -15, 17, 15]
    piece.King -> [-17, -16, -15, 1, 17, 16, 15, -1]
    piece.Pawn ->
      case piece.player {
        player.White -> [17, 15]
        player.Black -> [-17, -15]
      }
    piece.Queen -> [-17, -16, -15, 1, 17, 16, 15, -1]
    piece.Rook -> [-16, 1, 16, -1]
  }
}

fn piece_masks(piece: piece.PieceSymbol) {
  case piece {
    piece.Pawn -> 0x1
    piece.Knight -> 0x2
    piece.Bishop -> 0x4
    piece.Rook -> 0x8
    piece.Queen -> 0x10
    piece.King -> 0x20
  }
}

/// Returns the piece masks of the type of pieces that can
/// attack, given a difference of ox88 positions + 0x77
/// Note pawns are treated generally here
/// 20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,
///  0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,
///  0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,
///  0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,
///  0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,
///  0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,
///  0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,
/// 24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,
///  0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,
///  0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,
///  0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,
///  0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,
///  0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,
///  0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,
/// 20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20
fn attacks(difference: Int) {
  case difference {
    0 -> 20
    1 -> 0
    2 -> 0
    3 -> 0
    4 -> 0
    5 -> 0
    6 -> 0
    7 -> 24
    8 -> 0
    9 -> 0
    10 -> 0
    11 -> 0
    12 -> 0
    13 -> 0
    14 -> 20
    15 -> 0
    16 -> 0
    17 -> 20
    18 -> 0
    19 -> 0
    20 -> 0
    21 -> 0
    22 -> 0
    23 -> 24
    24 -> 0
    25 -> 0
    26 -> 0
    27 -> 0
    28 -> 0
    29 -> 20
    30 -> 0
    31 -> 0
    32 -> 0
    33 -> 0
    34 -> 20
    35 -> 0
    36 -> 0
    37 -> 0
    38 -> 0
    39 -> 24
    40 -> 0
    41 -> 0
    42 -> 0
    43 -> 0
    44 -> 20
    45 -> 0
    46 -> 0
    47 -> 0
    48 -> 0
    49 -> 0
    50 -> 0
    51 -> 20
    52 -> 0
    53 -> 0
    54 -> 0
    55 -> 24
    56 -> 0
    57 -> 0
    58 -> 0
    59 -> 20
    60 -> 0
    61 -> 0
    62 -> 0
    63 -> 0
    64 -> 0
    65 -> 0
    66 -> 0
    67 -> 0
    68 -> 20
    69 -> 0
    70 -> 0
    71 -> 24
    72 -> 0
    73 -> 0
    74 -> 20
    75 -> 0
    76 -> 0
    77 -> 0
    78 -> 0
    79 -> 0
    80 -> 0
    81 -> 0
    82 -> 0
    83 -> 0
    84 -> 0
    85 -> 20
    86 -> 2
    87 -> 24
    88 -> 2
    89 -> 20
    90 -> 0
    91 -> 0
    92 -> 0
    93 -> 0
    94 -> 0
    95 -> 0
    96 -> 0
    97 -> 0
    98 -> 0
    99 -> 0
    100 -> 0
    101 -> 2
    102 -> 53
    103 -> 56
    104 -> 53
    105 -> 2
    106 -> 0
    107 -> 0
    108 -> 0
    109 -> 0
    110 -> 0
    111 -> 0
    112 -> 24
    113 -> 24
    114 -> 24
    115 -> 24
    116 -> 24
    117 -> 24
    118 -> 56
    119 -> 0
    120 -> 56
    121 -> 24
    122 -> 24
    123 -> 24
    124 -> 24
    125 -> 24
    126 -> 24
    127 -> 0
    128 -> 0
    129 -> 0
    130 -> 0
    131 -> 0
    132 -> 0
    133 -> 2
    134 -> 53
    135 -> 56
    136 -> 53
    137 -> 2
    138 -> 0
    139 -> 0
    140 -> 0
    141 -> 0
    142 -> 0
    143 -> 0
    144 -> 0
    145 -> 0
    146 -> 0
    147 -> 0
    148 -> 0
    149 -> 20
    150 -> 2
    151 -> 24
    152 -> 2
    153 -> 20
    154 -> 0
    155 -> 0
    156 -> 0
    157 -> 0
    158 -> 0
    159 -> 0
    160 -> 0
    161 -> 0
    162 -> 0
    163 -> 0
    164 -> 20
    165 -> 0
    166 -> 0
    167 -> 24
    168 -> 0
    169 -> 0
    170 -> 20
    171 -> 0
    172 -> 0
    173 -> 0
    174 -> 0
    175 -> 0
    176 -> 0
    177 -> 0
    178 -> 0
    179 -> 20
    180 -> 0
    181 -> 0
    182 -> 0
    183 -> 24
    184 -> 0
    185 -> 0
    186 -> 0
    187 -> 20
    188 -> 0
    189 -> 0
    190 -> 0
    191 -> 0
    192 -> 0
    193 -> 0
    194 -> 20
    195 -> 0
    196 -> 0
    197 -> 0
    198 -> 0
    199 -> 24
    200 -> 0
    201 -> 0
    202 -> 0
    203 -> 0
    204 -> 20
    205 -> 0
    206 -> 0
    207 -> 0
    208 -> 0
    209 -> 20
    210 -> 0
    211 -> 0
    212 -> 0
    213 -> 0
    214 -> 0
    215 -> 24
    216 -> 0
    217 -> 0
    218 -> 0
    219 -> 0
    220 -> 0
    221 -> 20
    222 -> 0
    223 -> 0
    224 -> 20
    225 -> 0
    226 -> 0
    227 -> 0
    228 -> 0
    229 -> 0
    230 -> 0
    231 -> 24
    232 -> 0
    233 -> 0
    234 -> 0
    235 -> 0
    236 -> 0
    237 -> 0
    238 -> 20
    _ -> panic
  }
}

/// Returns the offset necessary to reach from one ox88 position to another
/// Given a difference in ox88 positions + 0x77
///  17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,
///   0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,
///   0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,
///   0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,
///   0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,
///   0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,
///   0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,
///   1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,
///   0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,
///   0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,
///   0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,
///   0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,
///   0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,
///   0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,
/// -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17
pub fn rays(difference: Int) {
  case difference {
    0 -> 17
    1 -> 0
    2 -> 0
    3 -> 0
    4 -> 0
    5 -> 0
    6 -> 0
    7 -> 16
    8 -> 0
    9 -> 0
    10 -> 0
    11 -> 0
    12 -> 0
    13 -> 0
    14 -> 15
    15 -> 0
    16 -> 0
    17 -> 17
    18 -> 0
    19 -> 0
    20 -> 0
    21 -> 0
    22 -> 0
    23 -> 16
    24 -> 0
    25 -> 0
    26 -> 0
    27 -> 0
    28 -> 0
    29 -> 15
    30 -> 0
    31 -> 0
    32 -> 0
    33 -> 0
    34 -> 17
    35 -> 0
    36 -> 0
    37 -> 0
    38 -> 0
    39 -> 16
    40 -> 0
    41 -> 0
    42 -> 0
    43 -> 0
    44 -> 15
    45 -> 0
    46 -> 0
    47 -> 0
    48 -> 0
    49 -> 0
    50 -> 0
    51 -> 17
    52 -> 0
    53 -> 0
    54 -> 0
    55 -> 16
    56 -> 0
    57 -> 0
    58 -> 0
    59 -> 15
    60 -> 0
    61 -> 0
    62 -> 0
    63 -> 0
    64 -> 0
    65 -> 0
    66 -> 0
    67 -> 0
    68 -> 17
    69 -> 0
    70 -> 0
    71 -> 16
    72 -> 0
    73 -> 0
    74 -> 15
    75 -> 0
    76 -> 0
    77 -> 0
    78 -> 0
    79 -> 0
    80 -> 0
    81 -> 0
    82 -> 0
    83 -> 0
    84 -> 0
    85 -> 17
    86 -> 0
    87 -> 16
    88 -> 0
    89 -> 15
    90 -> 0
    91 -> 0
    92 -> 0
    93 -> 0
    94 -> 0
    95 -> 0
    96 -> 0
    97 -> 0
    98 -> 0
    99 -> 0
    100 -> 0
    101 -> 0
    102 -> 17
    103 -> 16
    104 -> 15
    105 -> 0
    106 -> 0
    107 -> 0
    108 -> 0
    109 -> 0
    110 -> 0
    111 -> 0
    112 -> 1
    113 -> 1
    114 -> 1
    115 -> 1
    116 -> 1
    117 -> 1
    118 -> 1
    119 -> 0
    120 -> -1
    121 -> -1
    122 -> -1
    123 -> -1
    124 -> -1
    125 -> -1
    126 -> -1
    127 -> 0
    128 -> 0
    129 -> 0
    130 -> 0
    131 -> 0
    132 -> 0
    133 -> 0
    134 -> -15
    135 -> -16
    136 -> -17
    137 -> 0
    138 -> 0
    139 -> 0
    140 -> 0
    141 -> 0
    142 -> 0
    143 -> 0
    144 -> 0
    145 -> 0
    146 -> 0
    147 -> 0
    148 -> 0
    149 -> -15
    150 -> 0
    151 -> -16
    152 -> 0
    153 -> -17
    154 -> 0
    155 -> 0
    156 -> 0
    157 -> 0
    158 -> 0
    159 -> 0
    160 -> 0
    161 -> 0
    162 -> 0
    163 -> 0
    164 -> -15
    165 -> 0
    166 -> 0
    167 -> -16
    168 -> 0
    169 -> 0
    170 -> -17
    171 -> 0
    172 -> 0
    173 -> 0
    174 -> 0
    175 -> 0
    176 -> 0
    177 -> 0
    178 -> 0
    179 -> -15
    180 -> 0
    181 -> 0
    182 -> 0
    183 -> -16
    184 -> 0
    185 -> 0
    186 -> 0
    187 -> -17
    188 -> 0
    189 -> 0
    190 -> 0
    191 -> 0
    192 -> 0
    193 -> 0
    194 -> -15
    195 -> 0
    196 -> 0
    197 -> 0
    198 -> 0
    199 -> -16
    200 -> 0
    201 -> 0
    202 -> 0
    203 -> 0
    204 -> -17
    205 -> 0
    206 -> 0
    207 -> 0
    208 -> 0
    209 -> -15
    210 -> 0
    211 -> 0
    212 -> 0
    213 -> 0
    214 -> 0
    215 -> -16
    216 -> 0
    217 -> 0
    218 -> 0
    219 -> 0
    220 -> 0
    221 -> -17
    222 -> 0
    223 -> 0
    224 -> -15
    225 -> 0
    226 -> 0
    227 -> 0
    228 -> 0
    229 -> 0
    230 -> 0
    231 -> -16
    232 -> 0
    233 -> 0
    234 -> 0
    235 -> 0
    236 -> 0
    237 -> 0
    238 -> -17
    _ -> panic
  }
}
// END: Constants
